<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Servlet相关基础</title>
      <link href="2020/12/04/servlet-xiang-guan-ji-chu/"/>
      <url>2020/12/04/servlet-xiang-guan-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Servlet接口实现类开发步骤"><a href="#一、Servlet接口实现类开发步骤" class="headerlink" title="一、Servlet接口实现类开发步骤"></a>一、Servlet接口实现类开发步骤</h2><ol><li>第一步：创建一个java类继承与HttpServlet父类，使之成为一个servlet接口实现类</li></ol><ol start="2"><li>第二步：重写HttpServlet父类的两个方法。doGet或者doPost(分别针对Get和Post方法请求方式处理)</li></ol><ol start="3"><li><p>第三步：将servlet接口实现类信息注册到Tomcat服务器(写到web.xml文件中)</p><p>路径：web———&gt;WEB-INF——&gt;web.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--将Servlet接口实现类路径地址交给Tomcat--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>mm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--声明一个变量mm存储servlet接口实现类路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.***.***<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--声明servlet接口实现类路径--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--为了降低用户访问servlet接口实现难度，需要设置简短的请求别名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>mm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--设置简短别名时，别名书写时必须以“/”开头--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre></li></ol><hr><h2 id="二、Servlet对象生命周期"><a href="#二、Servlet对象生命周期" class="headerlink" title="二、Servlet对象生命周期"></a>二、Servlet对象生命周期</h2><ol><li><p>网站中所有的servlet接口实现类的实例对象只能由Http服务负责创建，开发人员不能手动创建。</p></li><li><p>在默认情况下，Http服务器接收到对于当前Servlet接口实现类第一次请求时自动创建这个servlet接口实现类的实例对象。</p><p>在手动配置情况下，要求Http服务器在启动时自动创建某个servlet接口实现类的实例对象</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--将Servlet接口实现类路径地址交给Tomcat--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>mm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--声明一个变量mm存储servlet接口实现类路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.***.***<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--声明servlet接口实现类路径--></span>    <span class="token comment" spellcheck="true">&lt;!--通知Tomcat在启动时负责创建实例对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--填写一个大于0的整数即可--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span></code></pre></li><li><p>在Http服务器运行期间，一个servlet接口实现类只能被创建出一个实例对象。</p></li><li><p>在Http服务器关闭时刻，自动将网站所有的Servlet对象进行销毁。</p></li></ol><hr><h2 id="三、HttpServletResponse接口"><a href="#三、HttpServletResponse接口" class="headerlink" title="三、HttpServletResponse接口"></a>三、HttpServletResponse接口</h2><p>主要功能：</p><ul><li><p>将执行结果以二进制形式写入<strong>响应体</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OneServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String result <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        PrintWriter out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//write()方法会把数字当ASCII码转成字符打印，因此一般用print()方法</span>          out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>设置响应头中<strong>“content-type”</strong>属性值(默认text)，从而控制浏览器使用对应编译器将响应体二进制数据编译为文字、图片、视频、命令。(用setContentType()方法)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreeServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>       String result <span class="token operator">=</span> <span class="token string">"java&lt;/br>mysql&lt;/br>html&lt;/br>糖"</span><span class="token punctuation">;</span>       response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       PrintWriter out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>设置响应头中<strong>“location”</strong>属性，将一个请求地址赋值给location，从而控制浏览器向指定服务器发送请求。(使用sendRedirect()方法)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FourServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String result <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><hr><h2 id="四、HttpServletRequest接口"><a href="#四、HttpServletRequest接口" class="headerlink" title="四、HttpServletRequest接口"></a>四、HttpServletRequest接口</h2><p>作用：</p><ul><li><p>读取<strong>Http请求协议包</strong>中<strong>“请求行”</strong>信息</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OneServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String requestURL <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"url:"</span><span class="token operator">+</span>requestURL<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method::"</span><span class="token operator">+</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>读取保存在<strong>Http请求协议包</strong>中<strong>“请求头”</strong>或者<strong>“请求体”</strong>中请求参数信息</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TwoServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        Enumeration parameterNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>parameterNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String paramName <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> parameterNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String parameter <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>paramName<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求参数："</span> <span class="token operator">+</span> paramName <span class="token operator">+</span> <span class="token string">" 请求参数值："</span> <span class="token operator">+</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>代替浏览器向Http服务器申请资源文件调用</p></li></ul><hr><h2 id="五、请求对象和响应对象生命周期"><a href="#五、请求对象和响应对象生命周期" class="headerlink" title="五、请求对象和响应对象生命周期"></a>五、请求对象和响应对象生命周期</h2><ol><li><p>在Http服务器接收到浏览器发送的<strong>“Http请求协议包”</strong>之后自动为当前的<strong>“Http请求协议包”</strong>生成一个<strong>“请求对象”</strong>和一个<strong>“响应对象”</strong>。</p></li><li><p>在Http服务器调用doGet/doPost方法时，负责将<strong>请求对象</strong>和<strong>响应对象</strong>作为实参传递到方法，确保doGet/doPost正确执行。</p></li><li><p>在Http服务器准备推送Http响应协议包之前，负责将本次请求关联的<strong>请求对象</strong>和<strong>响应对象</strong>销毁。</p><p>​    (请求对象和响应对象生命周期贯穿一次请求的处理过程中)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -servlet基础 -java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库相关知识</title>
      <link href="2020/12/04/oracle-shu-ju-ku-xiang-guan-zhi-shi/"/>
      <url>2020/12/04/oracle-shu-ju-ku-xiang-guan-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="一、存储结构"><a href="#一、存储结构" class="headerlink" title="一、存储结构"></a>一、存储结构</h3><ol><li><p>网状结构</p></li><li><p>层次结构</p></li><li><p>关系结构</p></li><li><p>二维表结构存储：数据，数据的描述，数据的关系。</p></li><li><p>对象结构</p></li></ol><p><strong><em>注意：数据库中需要同时用到and和or时，要注意and级别大于or。</em></strong></p><hr><h3 id="二、Oracle忘记用户密码"><a href="#二、Oracle忘记用户密码" class="headerlink" title="二、Oracle忘记用户密码"></a>二、Oracle忘记用户密码</h3><ol><li><p>cmd打开windows命令窗口</p></li><li><p>输入命令: sqlplus  /nolog</p></li><li><p>输入命令: conn /as sysdba</p></li><li><p>输入命令: alter user 用户名 identified by 新密码</p></li></ol><hr><h3 id="三、Oracle函数学习"><a href="#三、Oracle函数学习" class="headerlink" title="三、Oracle函数学习"></a>三、Oracle函数学习</h3><h4 id="1、单行函数学习"><a href="#1、单行函数学习" class="headerlink" title="1、单行函数学习"></a>1、单行函数学习</h4><ul><li><p>字符函数：</p><p>大写变小写字母：lower(char)；小写变大写字母：upper(char)</p><p>首字母大写：initcap(char) ；按字符翻译：translate(char,from,to)</p></li></ul><ul><li><p>数值函数：对数值类型数据进行运算</p><p>m保留小数点后n位：trunc(m,n)；取n的符号：sign(n)</p></li></ul><ul><li>日期函数：</li></ul><h4 id="2、多行函数学习-max-min-avg-sum-count"><a href="#2、多行函数学习-max-min-avg-sum-count" class="headerlink" title="2、多行函数学习(max,min,avg,sum,count)"></a>2、多行函数学习(max,min,avg,sum,count)</h4><p><strong><em>注意：多行函数不能和普通字段以及单行函数混用，除非分组</em></strong></p><ol><li>Max(字段名)：返回该字段的最大值</li><li>Min(字段名)：返回该字段的最小值</li><li>Sum(字段名)：返回该字段的和</li><li>Avg(字段名)：返回该字段的返回值</li><li>Count：<ul><li>Count(*)：返回表的记录数</li><li>Count(字段名)：返回该字段的非空值数量</li><li>Count(distinct 字段名)：去除该字段重复后的数量</li></ul></li></ol><h4 id="3、转换函数"><a href="#3、转换函数" class="headerlink" title="3、转换函数"></a>3、转换函数</h4><h5 id="to-number-数值类型的字符-：将字符转换为数值"><a href="#to-number-数值类型的字符-：将字符转换为数值" class="headerlink" title="to_number(数值类型的字符)：将字符转换为数值"></a>to_number(数值类型的字符)：将字符转换为数值</h5><h5 id="to-char-数值或者日期-：将数值或日期转换为字符"><a href="#to-char-数值或者日期-：将数值或日期转换为字符" class="headerlink" title="to_char(数值或者日期)：将数值或日期转换为字符"></a>to_char(数值或者日期)：将数值或日期转换为字符</h5><ol><li><p>数值转换：</p><p>可以指定格式：</p><p>用9占位，例如999，999，999会将数字按照三个一组使用逗号隔开</p><p>用0补位，与9占位相似，但是如果真实数据位数不足会用0补位</p></li><li><p>日期转换：</p><p>to_char(‘日期’,’要转换的格式’)：使用指定格式转换(例如yyyy-mm-dd)</p><p>to_char(‘日期’)：使用oracle自带格式转换(自带格式为日月年，例如01-2月-2020)</p></li></ol><h5 id="to-date-日期格式的字符-：将字符转换为日期"><a href="#to-date-日期格式的字符-：将字符转换为日期" class="headerlink" title="to_date(日期格式的字符)：将字符转换为日期"></a>to_date(日期格式的字符)：将字符转换为日期</h5><hr><h3 id="四、多表查询"><a href="#四、多表查询" class="headerlink" title="四、多表查询"></a>四、多表查询</h3><h4 id="1、多表联合查询"><a href="#1、多表联合查询" class="headerlink" title="1、多表联合查询"></a>1、多表联合查询</h4><blockquote><p><strong>当需要获取的数据分布在多张表中，考虑多表联合查询</strong></p></blockquote><ol><li><p>SQL92方式</p><ul><li><p>笛卡尔积：</p><p>​    将多个表的数据进行一一对应，所得结果为多表的笛卡尔积。结果数量为所有表的数据数量的乘积。 最终呈现的只有一张表。</p><pre class=" language-plsql"><code class="language-plsql">--同时查询A，B两表select * from A,B</code></pre><ul><li><p>等值连接筛选：</p><p>​    先做表的笛卡尔积，然后筛选，筛选的条件为等值时的筛选叫等值连接筛选。</p><pre class=" language-plsql"><code class="language-plsql">select * from A,B where A.c=B.d--公共字段应用 表名.字段名select A.C,B.C from A,B where A.c=B.d</code></pre></li></ul></li><li><p>不等值连接筛选：</p><pre class=" language-plsql"><code class="language-plsql">select * from A,B where A.c>=B.d and A.e<=B.f</code></pre></li><li><p>自连接：(在同一个表A里面查询)</p><pre class=" language-plsql"><code class="language-plsql">select * from A a1,A a2 where a1.c=a2.d and a1.e<=a2.f</code></pre></li><li><p>外连接：(在做等值连接时某表字段没有值但又需要显示时在一边使用“(+)”显示另一边的空字段)</p><p>​    左外连接：(“(+)”在右边显示左边对应字段中为空的数据)</p><pre class=" language-plsql"><code class="language-plsql">select * from A,B where A.c=B.c(+)</code></pre><p>​    右外连接：(“(+)”在左边显示右边对应字段中为空的数据)</p><pre class=" language-plsql"><code class="language-plsql">select * from A,B where A.c(+)=B.c</code></pre></li></ul></li><li><p>SQL99方式：</p><p>​    <strong><em>注意：如果用on或using关键字对结果进筛选，必须使用inner join作为表与表的连接，其中inner可以省略</em></strong></p><ul><li><p>笛卡尔积：使用cross join关键字</p><pre class=" language-plsql"><code class="language-plsql">select * from A cross join B</code></pre></li></ul><ul><li><p>筛选：</p><p>​    自然连接：使用natural join关键字(等值筛选)</p><p>​        特点1：底层先笛卡尔积，然后按照所有同名同值字段进行筛选。</p><pre class=" language-plsql"><code class="language-plsql">select * from A natural join B</code></pre><p>​        如果只想按照部分相同值字段筛选要用using关键字(using括号里面的字段必须是同名同值字段)</p><pre class=" language-plsql"><code class="language-plsql">--字段c是同名同值字段select * from A natural join B using(c)--字段c和d都是同名同值字段select * from A inner join B using(c,d)</code></pre><p>​        如果只想按照同值不同名字段筛选要用on关键字(普通筛选建议用where不要用on筛选)</p><pre class=" language-plsql"><code class="language-plsql">select * from A inner join B on A.c=B.d where e>100</code></pre></li><li><p>外连接：(outer可以省略不写)</p><p>​    左外连接：</p><pre class=" language-plsql"><code class="language-plsql">select * from A left outer join B on A.c=B.d</code></pre><p>​    右外连接：</p><pre class=" language-plsql"><code class="language-plsql">select * from A right outer join B on A.c=B.d</code></pre><p>​    全外连接：</p><pre class=" language-plsql"><code class="language-plsql">select * from A full outer join B on A.c=B.d</code></pre></li></ul></li></ol><hr><h3 id="五、子查询"><a href="#五、子查询" class="headerlink" title="五、子查询"></a>五、子查询</h3><blockquote><p><strong>where子句中出现查询语句称为子查询</strong></p><p><strong>当查询的筛选条件不明确时，考虑使用子查询</strong></p></blockquote><ol><li><p>单行子查询</p><p>子查询的结果只有一个值</p></li><li><p>多行子查询</p><p>子查询的结果有多个值(用关键字any,all,in,not in)</p><ul><li>any 表示任意</li><li>all 表示所有</li><li>in 相当于“= any”</li><li>not in 相当于“&lt;&gt; any”</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习笔记 </tag>
            
            <tag> Oracle数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intent的运用</title>
      <link href="2020/10/20/intent-de-yun-yong/"/>
      <url>2020/10/20/intent-de-yun-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Intent相关"><a href="#Intent相关" class="headerlink" title="Intent相关"></a>Intent相关</h1><h2 id="Intent的基础用法"><a href="#Intent的基础用法" class="headerlink" title="Intent的基础用法"></a>Intent的基础用法</h2><p>​    Intent是Activity之间的跳转。可以用putExtra()方法传递数据，其中如果想要传递对象应该将对象的类继承Serializable接口使其序列化。</p><p><strong>例如</strong>：<code>public class UserInfo implements Serializable{···}</code></p><p> 此处UserInfo实例化出的对象就可以当作参数传递。</p><h2 id="Intent进阶用法"><a href="#Intent进阶用法" class="headerlink" title="Intent进阶用法"></a>Intent进阶用法</h2><p>​    传递数据到下一个Activity用的是startActivity()方法，参数是Intent实例。如果需要有数据的返回应该用startActivityForResult()方法，传入两个参数：第一个参数是Intent实例；第二个参数是访问码(requestCode)，访问码是自己设置的，默认为0。startActivityForResult()与重写onActivityResult()方法应配合使用。</p><p><code>onActivityResult()</code>方法是：</p><p><code>protected void onActivityResult(int requestCode,int resultCode,@Nullable Intent data)</code></p><p>方法除了访问码还有一个结果码，所以在第二个有返回值的Activity里应该再设置一个结果码(使用<code>setResult()</code>方法)：</p><pre class=" language-java"><code class="language-java">Intent intent<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span><span class="token string">"我回来了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setResult</span><span class="token punctuation">(</span>RESULT_CODE<span class="token punctuation">,</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果此方法的结果码与访问码和设置的结果码与访问码相同，则代表数据返回正确。</p><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><p>附上使用例子：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>Protected <span class="token keyword">void</span> <span class="token function">onActivityResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span><span class="token keyword">int</span> resultCode<span class="token punctuation">,</span><span class="token annotation punctuation">@Nullable</span> Intent data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActivityResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span>resultCode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>requestCode <span class="token operator">==</span> REQUEST_CODE <span class="token operator">&amp;&amp;</span> resultCode <span class="token operator">==</span> MainActivity<span class="token punctuation">.</span>RESULT_CODE<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            String back <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sp_tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>back<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android学习笔记 </tag>
            
            <tag> Intent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对float数取小数点后给定位数的方法</title>
      <link href="2020/10/20/qu-xiao-shu-dian-hou-gei-ding-wei-shu-de-fang-fa/"/>
      <url>2020/10/20/qu-xiao-shu-dian-hou-gei-ding-wei-shu-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="取小数点后给定位数"><a href="#取小数点后给定位数" class="headerlink" title="取小数点后给定位数"></a>取小数点后给定位数</h1><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>j <span class="token operator">*</span><span class="token number">10</span><span class="token operator">^</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">^</span>n<span class="token punctuation">;</span></code></pre><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>其中j为浮点数，n是保留小数点后n位，即1位时10^n为10，2位时10^n为100……以此类推</p><h2 id="使用原理"><a href="#使用原理" class="headerlink" title="使用原理"></a>使用原理</h2><p>使用的是Math类中的round方法求浮点数小数点n位的四舍五入值</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>j为浮点数，如果设有i为整型，(float)i/10所得结果为xxx.0,使用该方法所得结果小数点后面n位都是0，应该改成(float)i/10.0</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习笔记 </tag>
            
            <tag> 实用方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义控件基础</title>
      <link href="2020/10/20/zi-ding-yi-kong-jian-ji-chu/"/>
      <url>2020/10/20/zi-ding-yi-kong-jian-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义控件用法"><a href="#自定义控件用法" class="headerlink" title="自定义控件用法"></a>自定义控件用法</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    最基础自定义控件在重写父类View中的onDraw方法中实现。但是实现自定义控件基本功能后如何动态改变自定义控件属性呢？</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p><strong>步骤如下：</strong></p><h3 id="1、自定义控件属性"><a href="#1、自定义控件属性" class="headerlink" title="1、自定义控件属性"></a>1、自定义控件属性</h3><p>​    在res文件夹下的values中新建一个文件(一般命名为attrs.xml)，自定义控件的所有属性在此处声明。格式如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- name:自定义控件名 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>declare-styleable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TestRedButton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- name:自定义属性名 format: 自定义属性值--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mBackground<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mTextColor<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>declare-styleable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><p>注意事项：自定义属性名应该跟系统自己属性名区分开，避免功能冲突。</p><h3 id="2、自定义控件属性使用"><a href="#2、自定义控件属性使用" class="headerlink" title="2、自定义控件属性使用"></a>2、自定义控件属性使用</h3><p>​    在自定义控件所在类里实现自定义的属性，使其在布局资源里可以使用这些属性控制。</p><p>代码如下：</p><pre class=" language-java"><code class="language-java">   TypedArray typedArray <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>TestRedButton<span class="token punctuation">)</span><span class="token punctuation">;</span>       mColor <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>TestRedButton_mBackground<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>       mTextColor <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>TestRedButton_mTextColor<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用的是TypeArray类的一系列方法，需要传入context和attrs，<code>R.styleable.TestRedButton</code>为自定义属性文件所在位置，<code>R.styleable.TestRedButton_mBackground</code>和<code>R.styleable.TestRedButton_mTextColor</code>为调用自定义的属性名，<code>Color.RED</code>和<code>Color.WHITE</code>为对应默认值。</p><h3 id="3、调用自定义控件"><a href="#3、调用自定义控件" class="headerlink" title="3、调用自定义控件"></a>3、调用自定义控件</h3><p>​    在自定义控件类中需要用到自定义属性的地方调用第2步中的变量即可(<code>mColor</code>和<code>mTextColor</code>)，最后我们就可以在布局文件中使用该控件并且在控件内使用自定义属性控制控件了。</p><p>示例如下：</p><pre class=" language-xml"><code class="language-xml">&lt;com.example.customcontrol.TestRedButton   android:id="@+id/test_red_button"   <span class="token comment" spellcheck="true">&lt;!-- 自定义属性，app:为前缀 --></span>   app:mBackground="#089764"   app:mTextColor="#734652"   <span class="token comment" spellcheck="true">&lt;!-- 系统固有属性，android:为前缀 --></span>   android:layout_width="300dp"   android:layout_height="300dp"   /></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android学习笔记 </tag>
            
            <tag> 自定义控件 </tag>
            
            <tag> view </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/13/hello-world/"/>
      <url>2020/10/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
