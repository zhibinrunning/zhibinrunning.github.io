<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dgsahjd</title>
      <link href="2020/12/04/dgsahjd/"/>
      <url>2020/12/04/dgsahjd/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库相关知识</title>
      <link href="2020/12/04/oracle-shu-ju-ku-xiang-guan-zhi-shi/"/>
      <url>2020/12/04/oracle-shu-ju-ku-xiang-guan-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="Oracle数据库相关知识"><a href="#Oracle数据库相关知识" class="headerlink" title="Oracle数据库相关知识"></a>Oracle数据库相关知识</h2><h3 id="一、存储结构"><a href="#一、存储结构" class="headerlink" title="一、存储结构"></a>一、存储结构</h3><p>1、网状结构</p><p>2、层次结构</p><p>3、关系结构</p><p>4、二维表结构存储：数据，数据的描述，数据的关系。</p><p>5、对象结构</p><p><strong><em>注意：数据库中需要同时用到and和or时，要注意and级别大于or。</em></strong></p><hr><h3 id="二、Oracle忘记用户密码"><a href="#二、Oracle忘记用户密码" class="headerlink" title="二、Oracle忘记用户密码"></a>二、Oracle忘记用户密码</h3><p>cmd打开windows命令窗口</p><p>输入命令: sqlplus  /nolog</p><p>输入命令: conn /as sysdba</p><p>输入命令: alter user 用户名 identified by 新密码</p><hr><h3 id="三、Oracle函数学习"><a href="#三、Oracle函数学习" class="headerlink" title="三、Oracle函数学习"></a>三、Oracle函数学习</h3><h4 id="1、单行函数学习"><a href="#1、单行函数学习" class="headerlink" title="1、单行函数学习"></a>1、单行函数学习</h4><p>字符函数：</p><p>大写变小写字母：lower(char)；小写变大写字母：upper(char)</p><p>首字母大写：initcap(char) ；按字符翻译：translate(char,from,to)</p><p>数值函数：对数值类型数据进行运算</p><p>m保留小数点后n位：trunc(m,n)；取n的符号：sign(n)</p><p>日期函数：</p><h4 id="2、多行函数学习-max-min-avg-sum-count"><a href="#2、多行函数学习-max-min-avg-sum-count" class="headerlink" title="2、多行函数学习(max,min,avg,sum,count)"></a>2、多行函数学习(max,min,avg,sum,count)</h4><p><strong><em>注意：多行函数不能和普通字段以及单行函数混用，除非分组</em></strong></p><p>Max(字段名)：返回该字段的最大值</p><p>Min(字段名)：返回该字段的最小值</p><p>Sum(字段名)：返回该字段的和</p><p>Avg(字段名)：返回该字段的返回值</p><p>Count：</p><p>​    Count(*)：返回表的记录数</p><p>​    Count(字段名)：返回该字段的非空值数量</p><p>​    Count(distinct 字段名)：去除该字段重复后的数量</p><h4 id="3、转换函数"><a href="#3、转换函数" class="headerlink" title="3、转换函数"></a>3、转换函数</h4><p>to_number(数值类型的字符)：将字符转换为数值</p><p>to_char(数值或者日期)：将数值或日期转换为字符</p><h5 id="数值转换："><a href="#数值转换：" class="headerlink" title="数值转换："></a>数值转换：</h5><p>可以指定格式：</p><p>用9占位，例如999，999，999会将数字按照三个一组使用逗号隔开</p><p>用0补位，与9占位相似，但是如果真实数据位数不足会用0补位</p><h5 id="日期转换："><a href="#日期转换：" class="headerlink" title="日期转换："></a>日期转换：</h5><p>to_char(‘日期’,’要转换的格式’)：使用指定格式转换(例如yyyy-mm-dd)</p><p>to_cahr(‘日期’)：使用oracle自带格式转换(自带格式为日月年，例如01-2月-2020)</p><p>to_date(日期格式的字符)：将字符转换为日期</p><hr><h3 id="四、多表查询"><a href="#四、多表查询" class="headerlink" title="四、多表查询"></a>四、多表查询</h3>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
          <category> Oracle数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intent的运用</title>
      <link href="2020/10/20/intent-de-yun-yong/"/>
      <url>2020/10/20/intent-de-yun-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Intent相关"><a href="#Intent相关" class="headerlink" title="Intent相关"></a>Intent相关</h1><h2 id="Intent的基础用法"><a href="#Intent的基础用法" class="headerlink" title="Intent的基础用法"></a>Intent的基础用法</h2><p>​    Intent是Activity之间的跳转。可以用putExtra()方法传递数据，其中如果想要传递对象应该将对象的类继承Serializable接口使其序列化。</p><p><strong>例如</strong>：<code>public class UserInfo implements Serializable{···}</code></p><p> 此处UserInfo实例化出的对象就可以当作参数传递。</p><h2 id="Intent进阶用法"><a href="#Intent进阶用法" class="headerlink" title="Intent进阶用法"></a>Intent进阶用法</h2><p>​    传递数据到下一个Activity用的是startActivity()方法，参数是Intent实例。如果需要有数据的返回应该用startActivityForResult()方法，传入两个参数：第一个参数是Intent实例；第二个参数是访问码(requestCode)，访问码是自己设置的，默认为0。startActivityForResult()与重写onActivityResult()方法应配合使用。</p><p><code>onActivityResult()</code>方法是：</p><p><code>protected void onActivityResult(int requestCode,int resultCode,@Nullable Intent data)</code></p><p>方法除了访问码还有一个结果码，所以在第二个有返回值的Activity里应该再设置一个结果码(使用<code>setResult()</code>方法)：</p><pre class=" language-java"><code class="language-java">Intent intent<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span><span class="token string">"我回来了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setResult</span><span class="token punctuation">(</span>RESULT_CODE<span class="token punctuation">,</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果此方法的结果码与访问码和设置的结果码与访问码相同，则代表数据返回正确。</p><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><p>附上使用例子：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>Protected <span class="token keyword">void</span> <span class="token function">onActivityResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span><span class="token keyword">int</span> resultCode<span class="token punctuation">,</span><span class="token annotation punctuation">@Nullable</span> Intent data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActivityResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span>resultCode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>requestCode <span class="token operator">==</span> REQUEST_CODE <span class="token operator">&amp;&amp;</span> resultCode <span class="token operator">==</span> MainActivity<span class="token punctuation">.</span>RESULT_CODE<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            String back <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sp_tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>back<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android学习笔记 </category>
          
          <category> Intent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对float数取小数点后给定位数的方法</title>
      <link href="2020/10/20/qu-xiao-shu-dian-hou-gei-ding-wei-shu-de-fang-fa/"/>
      <url>2020/10/20/qu-xiao-shu-dian-hou-gei-ding-wei-shu-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="取小数点后给定位数"><a href="#取小数点后给定位数" class="headerlink" title="取小数点后给定位数"></a>取小数点后给定位数</h1><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>j <span class="token operator">*</span><span class="token number">10</span><span class="token operator">^</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">^</span>n<span class="token punctuation">;</span></code></pre><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>其中j为浮点数，n是保留小数点后n位，即1位时10^n为10，2位时10^n为100……以此类推</p><h2 id="使用原理"><a href="#使用原理" class="headerlink" title="使用原理"></a>使用原理</h2><p>使用的是Math类中的round方法求浮点数小数点n位的四舍五入值</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>j为浮点数，如果设有i为整型，(float)i/10所得结果为xxx.0,使用该方法所得结果小数点后面n位都是0，应该改成(float)i/10.0</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
          <category> 实用方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义控件基础</title>
      <link href="2020/10/20/zi-ding-yi-kong-jian-ji-chu/"/>
      <url>2020/10/20/zi-ding-yi-kong-jian-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义控件用法"><a href="#自定义控件用法" class="headerlink" title="自定义控件用法"></a>自定义控件用法</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    最基础自定义控件在重写父类View中的onDraw方法中实现。但是实现自定义控件基本功能后如何动态改变自定义控件属性呢？</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p><strong>步骤如下：</strong></p><h3 id="1、自定义控件属性"><a href="#1、自定义控件属性" class="headerlink" title="1、自定义控件属性"></a>1、自定义控件属性</h3><p>​    在res文件夹下的values中新建一个文件(一般命名为attrs.xml)，自定义控件的所有属性在此处声明。格式如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- name:自定义控件名 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>declare-styleable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TestRedButton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- name:自定义属性名 format: 自定义属性值--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mBackground<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mTextColor<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>declare-styleable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><p>注意事项：自定义属性名应该跟系统自己属性名区分开，避免功能冲突。</p><h3 id="2、自定义控件属性使用"><a href="#2、自定义控件属性使用" class="headerlink" title="2、自定义控件属性使用"></a>2、自定义控件属性使用</h3><p>​    在自定义控件所在类里实现自定义的属性，使其在布局资源里可以使用这些属性控制。</p><p>代码如下：</p><pre class=" language-java"><code class="language-java">   TypedArray typedArray <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>TestRedButton<span class="token punctuation">)</span><span class="token punctuation">;</span>       mColor <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>TestRedButton_mBackground<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>       mTextColor <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>TestRedButton_mTextColor<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用的是TypeArray类的一系列方法，需要传入context和attrs，<code>R.styleable.TestRedButton</code>为自定义属性文件所在位置，<code>R.styleable.TestRedButton_mBackground</code>和<code>R.styleable.TestRedButton_mTextColor</code>为调用自定义的属性名，<code>Color.RED</code>和<code>Color.WHITE</code>为对应默认值。</p><h3 id="3、调用自定义控件"><a href="#3、调用自定义控件" class="headerlink" title="3、调用自定义控件"></a>3、调用自定义控件</h3><p>​    在自定义控件类中需要用到自定义属性的地方调用第2步中的变量即可(<code>mColor</code>和<code>mTextColor</code>)，最后我们就可以在布局文件中使用该控件并且在控件内使用自定义属性控制控件了。</p><p>示例如下：</p><pre class=" language-xml"><code class="language-xml">&lt;com.example.customcontrol.TestRedButton   android:id="@+id/test_red_button"   <span class="token comment" spellcheck="true">&lt;!-- 自定义属性，app:为前缀 --></span>   app:mBackground="#089764"   app:mTextColor="#734652"   <span class="token comment" spellcheck="true">&lt;!-- 系统固有属性，android:为前缀 --></span>   android:layout_width="300dp"   android:layout_height="300dp"   /></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android学习笔记 </category>
          
          <category> 自定义控件 </category>
          
          <category> view </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/13/hello-world/"/>
      <url>2020/10/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
